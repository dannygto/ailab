import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Grid,
  Paper,
  Tabs,
  Tab,
  Badge,
  Chip,
  Alert,
  CircularProgress,
  Button,
  Switch,
  FormControlLabel,
  Card,
  CardHeader,
  CardContent,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Checkbox
} from '@mui/material';
import {
  Refresh as RefreshIcon,
  Router as RouterIcon,
  Memory as MemoryIcon,
  Storage as StorageIcon,
  Speed as SpeedIcon,
  SignalCellular4Bar as SignalIcon,
  Devices as DevicesIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Sync as SyncIcon
} from '@mui/icons-material';

import { deviceStatusService } from '../../services/deviceStatus.service';
import { webSocketService } from '../../services/websocket.service';
import { Device } from '../../types';
import { DeviceStatus } from '../../types/devices';
import DeviceMonitoringActions from './components/DeviceMonitoringActions';

// 状态颜色映射
const statusColors: Record<string, string> = {
  [DeviceStatus.ONLINE]: '#4caf50',
  [DeviceStatus.OFFLINE]: '#f44336',
  [DeviceStatus.BUSY]: '#ff9800',
  [DeviceStatus.ERROR]: '#f44336',
  [DeviceStatus.MAINTENANCE]: '#2196f3',
  [DeviceStatus.ACTIVE]: '#4caf50',
  [DeviceStatus.RUNNING]: '#4caf50',
  [DeviceStatus.IDLE]: '#9e9e9e'
};

// 状态图标映射
const StatusIcon = ({ status }: { status: string }) => {
  switch (status) {
    case DeviceStatus.ONLINE:
    case DeviceStatus.ACTIVE:
    case DeviceStatus.RUNNING:
      return <CheckCircleIcon sx={{ color: statusColors[DeviceStatus.ONLINE] }} />;
    case DeviceStatus.OFFLINE:
    case DeviceStatus.ERROR:
      return <ErrorIcon sx={{ color: statusColors[DeviceStatus.OFFLINE] }} />;
    case DeviceStatus.BUSY:
      return <WarningIcon sx={{ color: statusColors[DeviceStatus.BUSY] }} />;
    case DeviceStatus.MAINTENANCE:
      return <SyncIcon sx={{ color: statusColors[DeviceStatus.MAINTENANCE] }} />;
    default:
      return <DevicesIcon sx={{ color: statusColors[DeviceStatus.IDLE] }} />;
  }
};

const DeviceMonitoringV2: React.FC = () => {
  const [devices, setDevices] = useState<Device[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error] = useState<string | null>(null);
  const [tabValue, setTabValue] = useState(0);
  const [useRealtime, setUseRealtime] = useState<boolean>(true);
  const [connected, setConnected] = useState<boolean>(false);
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
  const [selectedDevices, setSelectedDevices] = useState<Device[]>([]);

  // 加载设备并设置状态更新订阅
  useEffect(() => {
    // 设置WebSocket连接状态监听
    const connectionSub = deviceStatusService.onConnectionStatus().subscribe(status => {
      setConnected(status);
    });

    // 设置设备状态更新监听
    const devicesSub = deviceStatusService.getAllDevices(true).subscribe(deviceList => {
      setDevices(deviceList);
      setLoading(false);
      setLastUpdate(new Date());
    });

    // 设置设备状态更新监听
    const updateSub = deviceStatusService.onDeviceStatusUpdate().subscribe(() => {
      setLastUpdate(new Date());
    });

    // 更新服务配置
    deviceStatusService.updateOptions({
      useWebSocket: useRealtime,
      fetchInterval: useRealtime ? 60000 : 10000 // 如果不使用WebSocket，则更频繁地轮询
    });

    return () => {
      // 清理订阅
      connectionSub.unsubscribe();
      devicesSub.unsubscribe();
      updateSub.unsubscribe();
    };
  }, [useRealtime]);

  // 处理设备选择
  const handleDeviceSelect = (device: Device) => {
    const selected = selectedDevices.some(d => d.id === device.id);

    if (selected) {
      setSelectedDevices(selectedDevices.filter(d => d.id !== device.id));
    } else {
      setSelectedDevices([...selectedDevices, device]);
    }
  };

  // 处理全选/取消全选
  const handleSelectAll = (select: boolean) => {
    if (select) {
      setSelectedDevices([...devices]);
    } else {
      setSelectedDevices([]);
    }
  };

  // 清除选择
  const clearSelection = () => {
    setSelectedDevices([]);
  };

  // 处理标签页变更
  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  // 处理刷新按钮点击
  const handleRefresh = () => {
    setLoading(true);
    deviceStatusService.getAllDevices(true);
  };

  // 处理实时更新开关变更
  const handleRealtimeToggle = (event: React.ChangeEvent<HTMLInputElement>) => {
    const useWs = event.target.checked;
    setUseRealtime(useWs);

    // 更新服务配置
    deviceStatusService.updateOptions({
      useWebSocket: useWs,
      fetchInterval: useWs ? 60000 : 10000
    });
  };

  // 计算每种状态的设备数量
  const deviceCounts = {
    total: devices.length,
    online: devices.filter(device => device.status === DeviceStatus.ONLINE || device.status === DeviceStatus.ACTIVE || device.status === DeviceStatus.RUNNING).length,
    offline: devices.filter(device => device.status === DeviceStatus.OFFLINE || device.status === DeviceStatus.ERROR).length,
    warning: devices.filter(device => device.status === DeviceStatus.BUSY).length,
    maintenance: devices.filter(device => device.status === DeviceStatus.MAINTENANCE).length,
    unknown: devices.filter(device => device.status === DeviceStatus.IDLE || !device.status).length
  };

  // 渲染设备概览页
  const renderOverview = () => {
    return (
      <Grid container spacing={3}>
        {/* 状态摘要卡片 */}
        <Grid item xs={12} md={4}>
          <Paper sx={{ p: 2, height: '100%' }}>
            <Typography variant="h6" gutterBottom>设备状态摘要</Typography>
            <List>
              <ListItem>
                <ListItemIcon>
                  <DevicesIcon />
                </ListItemIcon>
                <ListItemText primary="总设备数" />
                <Chip label={deviceCounts.total} color="default" />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <CheckCircleIcon sx={{ color: statusColors[DeviceStatus.ONLINE] }} />
                </ListItemIcon>
                <ListItemText primary="在线设备" />
                <Chip label={deviceCounts.online} color="success" />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <ErrorIcon sx={{ color: statusColors[DeviceStatus.OFFLINE] }} />
                </ListItemIcon>
                <ListItemText primary="离线设备" />
                <Chip label={deviceCounts.offline} color="error" />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <WarningIcon sx={{ color: statusColors[DeviceStatus.BUSY] }} />
                </ListItemIcon>
                <ListItemText primary="警告状态" />
                <Chip label={deviceCounts.warning} color="warning" />
              </ListItem>
              <ListItem>
                <ListItemIcon>
                  <SyncIcon sx={{ color: statusColors[DeviceStatus.MAINTENANCE] }} />
                </ListItemIcon>
                <ListItemText primary="维护中" />
                <Chip label={deviceCounts.maintenance} color="info" />
              </ListItem>
            </List>
          </Paper>
        </Grid>

        {/* 连接状态卡片 */}
        <Grid item xs={12} md={8}>
          <Paper sx={{ p: 2, height: '100%' }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography variant="h6">实时监控状态</Typography>
              <Box>
                <FormControlLabel
                  control={
                    <Switch
                      checked={useRealtime}
                      onChange={handleRealtimeToggle}
                      color="primary"
                    />
                  }
                  label="实时更新"
                />
                <Button
                  startIcon={<RefreshIcon />}
                  onClick={handleRefresh}
                  variant="outlined"
                  size="small"
                  sx={{ ml: 2 }}
                >
                  刷新
                </Button>
              </Box>
            </Box>

            <Alert
              severity={connected ? "success" : "info"}
              sx={{ mb: 2 }}
            >
              {connected
                ? "已连接到实时监控服务，设备状态将实时更新"
                : "使用轮询模式，设备状态每10秒更新一次"}
            </Alert>

            <Box>
              <Typography variant="body2" color="textSecondary">
                最后更新时间: {lastUpdate.toLocaleString()}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                连接状态: {connected ? "已连接" : "未连接"}
              </Typography>
              <Typography variant="body2" color="textSecondary">
                WebSocket状态: {webSocketService.getConnectionState()}
              </Typography>
            </Box>
          </Paper>
        </Grid>

        {/* 批量选择控制 */}
        <Grid item xs={12}>
          <Box display="flex" justifyContent="space-between" alignItems="center" mb={1}>
            <Typography variant="h6" gutterBottom>设备状态</Typography>
            <Box display="flex" alignItems="center">
              <FormControlLabel
                control={
                  <Checkbox
                    checked={selectedDevices.length === devices.length && devices.length > 0}
                    indeterminate={selectedDevices.length > 0 && selectedDevices.length < devices.length}
                    onChange={(e) => handleSelectAll(e.target.checked)}
                  />
                }
                label={`${selectedDevices.length > 0 ? `已选择 ${selectedDevices.length} 个设备` : "全选"}`}
              />
            </Box>
          </Box>

          <Grid container spacing={2}>
            {devices.map(device => (
              <Grid item xs={12} sm={6} md={4} lg={3} key={device.id}>
                <Card
                  variant="outlined"
                  sx={{
                    cursor: 'pointer',
                    border: selectedDevices.some(d => d.id === device.id)
                      ? '2px solid #1976d2'
                      : '1px solid rgba(0, 0, 0, 0.12)'
                  }}
                  onClick={() => handleDeviceSelect(device)}
                >
                  <CardHeader
                    avatar={
                      <Box display="flex" alignItems="center">
                        <Checkbox
                          checked={selectedDevices.some(d => d.id === device.id)}
                          onChange={(e) => {
                            e.stopPropagation();
                            handleDeviceSelect(device);
                          }}
                          onClick={(e) => e.stopPropagation()}
                          size="small"
                        />
                        <StatusIcon status={device.status} />
                      </Box>
                    }
                    title={device.name}
                    subheader={`${device.type || "未知类型"} | ID: ${device.id.substring(0, 8)}...`}
                    action={
                      <Chip
                        label={device.status}
                        size="small"
                        sx={{
                          bgcolor: statusColors[device.status] || statusColors[DeviceStatus.IDLE],
                          color: '#fff'
                        }}
                      />
                    }
                  />
                  <Divider />
                  <CardContent>
                    <Typography variant="body2" color="textSecondary" gutterBottom>
                      最后更新: {device.lastSeen ? new Date(device.lastSeen).toLocaleString() : new Date().toLocaleString()}
                    </Typography>

                    {device.metrics && (
                      <Box mt={1}>
                        <Typography variant="caption" color="textSecondary">
                          性能指标
                        </Typography>
                        <Grid container spacing={1}>
                          {device.metrics.cpu && (
                            <Grid item xs={6}>
                              <Chip
                                icon={<MemoryIcon />}
                                label={`CPU: ${device.metrics.cpu}%`}
                                size="small"
                                variant="outlined"
                              />
                            </Grid>
                          )}
                          {device.metrics.memory && (
                            <Grid item xs={6}>
                              <Chip
                                icon={<StorageIcon />}
                                label={`内存: ${device.metrics.memory}%`}
                                size="small"
                                variant="outlined"
                              />
                            </Grid>
                          )}
                          {device.metrics.network && (
                            <Grid item xs={6}>
                              <Chip
                                icon={<RouterIcon />}
                                label={`网络: ${device.metrics.network}`}
                                size="small"
                                variant="outlined"
                              />
                            </Grid>
                          )}
                          {device.metrics.temperature && (
                            <Grid item xs={6}>
                              <Chip
                                icon={<SpeedIcon />}
                                label={`温度: ${device.metrics.temperature}°C`}
                                size="small"
                                variant="outlined"
                              />
                            </Grid>
                          )}
                        </Grid>
                      </Box>
                    )}
                  </CardContent>
                </Card>
              </Grid>
            ))}

            {devices.length === 0 && !loading && (
              <Grid item xs={12}>
                <Alert severity="info">没有找到设备</Alert>
              </Grid>
            )}
          </Grid>
        </Grid>
      </Grid>
    );
  };

  // 渲染详细数据页
  const renderDetailedData = () => {
    return (
      <Box>
        <Typography variant="h6" gutterBottom>
          详细数据监控
        </Typography>
        <Typography variant="body1" color="textSecondary">
          设备详细数据监控正在开发中...
        </Typography>
      </Box>
    );
  };

  // 渲染设置页
  const renderSettings = () => {
    return (
      <Box>
        <Typography variant="h6" gutterBottom>
          监控设置
        </Typography>
        <Paper sx={{ p: 2 }}>
          <Typography variant="subtitle1" gutterBottom>
            更新配置
          </Typography>
          <FormControlLabel
            control={
              <Switch
                checked={useRealtime}
                onChange={handleRealtimeToggle}
                color="primary"
              />
            }
            label="使用WebSocket实时更新"
          />
          <Typography variant="body2" color="textSecondary">
            启用实时更新可以获得更及时的设备状态信息，但可能会增加网络流量。
          </Typography>

          <Box mt={3}>
            <Button
              variant="outlined"
              color="primary"
              onClick={() => deviceStatusService.clearCache()}
            >
              清除缓存
            </Button>
            <Typography variant="body2" color="textSecondary" mt={1}>
              清除缓存将重新加载所有设备数据。
            </Typography>
          </Box>
        </Paper>
      </Box>
    );
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '50vh' }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box sx={{ p: 2 }}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4" gutterBottom>
          设备监控面板 V2
        </Typography>
        <Box display="flex" alignItems="center">
          <DeviceMonitoringActions
            selectedDevices={selectedDevices}
            onRefresh={handleRefresh}
            onClearSelection={clearSelection}
          />
          <Chip
            icon={connected ? <SignalIcon /> : <RefreshIcon />}
            label={connected ? "实时监控中" : "轮询模式"}
            color={connected ? "success" : "default"}
            variant="outlined"
            sx={{ ml: 2 }}
          />
        </Box>
      </Box>

      <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
        改进版设备监控面板，使用WebSocket提供实时状态更新。
      </Typography>

      <Paper sx={{ mb: 3 }}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          indicatorColor="primary"
          textColor="primary"
        >
          <Tab
            label={
              <Badge badgeContent={deviceCounts.total} color="primary">
                设备概览
              </Badge>
            }
          />
          <Tab label="详细数据" />
          <Tab label="监控设置" />
        </Tabs>
      </Paper>

      <Box mt={3}>
        {tabValue === 0 && renderOverview()}
        {tabValue === 1 && renderDetailedData()}
        {tabValue === 2 && renderSettings()}
      </Box>
    </Box>
  );
};

export default DeviceMonitoringV2;
